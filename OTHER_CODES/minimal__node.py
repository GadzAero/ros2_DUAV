#!/usr/bin/env python3

# General importation
from time import sleep
# Import ROS2 utils
import rclpy
import rclpy.executors
from rclpy.node import Node
# Import Intefaces

############################################################################################################################################################################################################################
##### Class defining MinimalNode ############################################################################################################################################################################################################################
class MinimalNode(Node):
    def __init__(self):
        super().__init__('MinimalNode', namespace='MinimalNode')
        
        ### ROS2 Callbacks

        ### General Parameters
        
        self.get_logger().info("NODE MinimalNode STARTED.")
        
    ############################################################################################################################################################################################################################
    ##### TIMER CALLBACK ############################################################################################################################################################################################################################
            
    ############################################################################################################################################################################################################################
    ##### SUBSCRIBERS CALLBACK ############################################################################################################################################################################################################################

    ############################################################################################################################################################################################################################
    ##### ACTIONS CALLBACK ############################################################################################################################################################################################################################
     
    ############################################################################################################################################################################################################################
    ##### SERVICES CALLBACK ############################################################################################################################################################################################################################


############################################################################################################################################################################################################################
##### Node entry point ############################################################################################################################################################################################################################
def main(args=None):
    rclpy.init(args=args)
    
    ### Creating the mutlithread executor
    node = MinimalNode()
    executor = rclpy.executors.SingleThreadedExecutor()
    # executor = rclpy.executors.MultiThreadedExecutor(num_threads=10)
    executor.add_node(node)
    try:
        executor.spin()
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
